// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  Published
  Draft
  Suspended
  OutOfStock
}

enum ProductType {
  Simple
  Variable
}

enum userRole {
  Admin
  Vendor
  Customer
}

enum orderStatus {
  Pending
  Processing
  Complete
}

enum VerificationStatus {
  Pending
  Processing
  Complete
}

enum ShopStatus {
  Pending
  Approved
  Rejected
}

model CustomerAddress {
  id        String   @id @default(cuid())
  title     String
  street    String
  city      String
  state     String?
  country   String
  zipCode   String?
  phone     String?
  isDefault Boolean  @default(false)
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id             String   @id @default(cuid())
  userId         String
  user           user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardNumber     String
  cardHolderName String
  expirationDate String
  cvc            String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model user {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String?
  firstname          String?
  lastname           String?
  role               userRole?          @default(Customer)
  emailVerified      DateTime?
  image              String?
  accounts           account[]
  avatar             avatar?
  name               String?
  isOnboardedVendor  Boolean            @default(false)
  hasPaid            Boolean            @default(false)
  products           product[]          @relation("UserProducts")
  shop               shop?
  orders             order[]
  cart               cart?
  paymentReference   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  verificationStatus VerificationStatus @default(Pending)
  addresses          CustomerAddress[]
  paymentMethods     PaymentMethod[]
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model avatar {
  id        String   @id @default(uuid())
  original  String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      user     @relation(fields: [userId], references: [id])
}

model shop {
  id           String        @id @default(cuid())
  shopName     String        @default("My Shop")
  description  String        @default("")
  logo         String?       @default("")
  banner       String?       @default("")
  slug         String        @unique
  status       ShopStatus    @default(Pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  userId       String        @unique
  user         user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     product[]     @relation("ShopProducts")
  orders       order[]
  address      Address?
  paymentInfo  PaymentInfo?
  shopSettings ShopSettings?
}

model Address {
  id         String @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  shop       shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId     String @unique
}

model PaymentInfo {
  id            String @id @default(cuid())
  accountName   String
  accountNumber String
  bankName      String
  shop          shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String @unique
}

model ShopSettings {
  id              String   @id @default(cuid())
  phoneNumber     String
  website         String
  businessHours   String?
  category        String?
  deliveryOptions String[]
  isActive        Boolean  @default(true)
  shop            shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId          String   @unique
}

model product {
  id            String        @id @default(uuid())
  name          String
  slug          String
  description   String
  price         Int
  sale_price    Int
  sku           Int           @default(autoincrement())
  quantity      Int
  in_stock      Boolean?
  is_taxable    Boolean?
  status        ProductStatus @default(Draft)
  product_type  ProductType   @default(Simple)
  video         String?
  image         String?
  user_id       String?
  ratings       Float?
  total_reviews Int?
  my_review     String?
  in_wishlist   Boolean?
  shop_id       String?
  categories    category[]
  shop          shop?         @relation("ShopProducts", fields: [shop_id], references: [id], onDelete: SetNull)
  user          user?         @relation("UserProducts", fields: [user_id], references: [id], onDelete: SetNull)
  gallery       String[]
  shop_name     String?
  stock         Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model category {
  id       String    @id @unique @default(uuid())
  name     String
  slug     String
  products product[]

  @@unique([name, slug])
}

model verificationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(uuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}

model orderItem {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  quantity  Int

  orderId String
  order   order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model order {
  id        String   @id @default(uuid()) @map("id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status     orderStatus
  totalPrice Float

  orderItems orderItem[]

  userId String
  user   user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop   shop?   @relation(fields: [shopId], references: [id])
  shopId String?

  @@map("orders")
}

model cartItem {
  id        String   @id @default(uuid()) @map("id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  quantity  Int

  cartId String
  cart   cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model cart {
  id        String   @id @default(uuid()) @map("id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems cartItem[]

  userId String @unique
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
